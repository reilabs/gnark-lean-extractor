package extractor_test

import (
	"bytes"
	"crypto/sha256"
	"errors"
	"fmt"
	"io"
	"log"
	"os"
	"testing"
)

// saveOutput can be called once when creating/changing a test to generate
// the reference result
func saveOutput(filename string, testOutput string) {
	f, err := os.Create(filename)
	if err != nil {
		log.Fatal(err)
	}
	defer f.Close()

	_, err = f.WriteString(testOutput)
	if err != nil {
		log.Fatal(err)
	}
}

// checkOutput performs a check of the circuit generated by the extractor.
// If the hashes don't match, the circuit generated by the extractor is printed.
func checkOutput(t *testing.T, testOutput string) {
	// I assume tests are executed from the extractor/test directory
	filename := fmt.Sprintf("../../test/%s.lean", t.Name())

	// https://stackoverflow.com/a/66405130
	if _, err := os.Stat(filename); errors.Is(err, os.ErrNotExist) {
		saveOutput(filename, testOutput)
	}

	f, err := os.Open(filename)
	if err != nil {
		log.Fatalf("Error checking test output\n\n%s\n\n%s\n\n", err, testOutput)
	}
	defer f.Close()

	h := sha256.New()
	if _, err := io.Copy(h, f); err != nil {
		log.Fatal(err)
	}

	correctHash := h.Sum(nil)

	h.Reset()
	if _, err := h.Write([]byte(testOutput)); err != nil {
		log.Fatal(err)
	}
	testResultHash := h.Sum(nil)
	if !bytes.Equal(correctHash, testResultHash) {
		t.Logf("This circuit doesn't match the result in the test folder\n\n%s", testOutput)
		t.Fail()
	}
}
